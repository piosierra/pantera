sep = "\n")
features <- features$V1
xgb.fit <-
xgb.load(file.path(script.basename, "model/xgbmodel_20231030"))
lx("Processing")
orfs[, V1 := gsub("_[0-9]*$", "", V1)]
orfs[, prot := gsub(".*#", "", V2)]
orfs_table <-
dcast(
orfs,
V1 ~ prot,
value.var = "V12",
fun.agg = function(x) {
max(x)
}
)
orfs_table[is.na(orfs_table), ] <- 0
orfs_table[orfs_table == -Inf, ] <- 0
names <- orfs_table$V1
orfs_table$V1 <- NULL
colnames(orfs_table) <- make.names(colnames(orfs_table))
if (sum(!(colnames(orfs_table) %in% features)) > 0) {
orfs_table[, colnames(orfs_table)[!(colnames(orfs_table) %in% features)] :=
NULL]
}
orfs_table[, features[!(features %in% colnames(orfs_table))] := 0]
setcolorder(orfs_table, features)
lx("Get predictions")
xgb.pred2 = predict(xgb.fit, as.matrix(orfs_table), reshape = T)
xgb.pred2 = as.data.frame(xgb.pred2)
colnames(xgb.pred2) = types
xgb.pred2$prediction = apply(xgb.pred2, 1, function(x)
colnames(xgb.pred2)[which.max(x)])
xgb.pred2$prob = apply(xgb.pred2[1:ncol(xgb.pred2) - 1], 1, function(x)
max(x))
result <-
data.table(
Name = names,
Prediction = xgb.pred2$prediction,
Probability = xgb.pred2$prob
)
fwrite(result, paste0(file, ".predictions"), sep = "\t")
}
View(orfs_table)
View(orfs)
View(orfs_table)
View(orfs)
View(orfs)
der <- ffasta(file)
der
fa <- ffasta(file)
View(xgb.pred2)
View(result)
View(result)
drr <- merge(fa, result, by.x = name, by.y =  Name)
drr <- merge(fa, result, by.x = "name", by.y =  "Name")
View(drr)
fa$name
result$Name
result <- result[, name := paste0(">", Name)]
fwrite(result, paste0(file, ".predictions"), sep = "\t")
View(result)
result <-
data.table(
name = paste0(">",names),
Prediction = xgb.pred2$prediction,
Probability = xgb.pred2$prob
)
View(result)
drr <- merge(fa, result, by.x = "name", by.y =  "Name")
drr <- merge(fa, result)
View(drr)
?merge
drr <- merge(fa, result, all = T)
fa <- ffasta(file)
setwd(current)
setwd(opt$output_folder)
# file <- paste0(opt$lib_name, "-consensi.fa")
lx("Reading orfs")
if (!file.exists("orfs.tbl")) {
system(
paste0(
"getorf -sequence ",
file,
" --outseq temp.orfs -minsize 450 &>/dev/null; blastp -num_threads 8 -query temp.orfs -db ",
script.basename,
"/libs/RepeatPeps.lib -outfmt 6 -evalue 1e-10 > orfs.tbl"
)
)
}
#orfs <- fread(cmd=paste0("getorf -sequence ", file," --outseq temp.orfs -minsize 450 &>/dev/null; blastp -num_threads 8 -query temp.orfs -db ", current,"/", script.basename, "/libs/RepeatPeps.lib -outfmt 6 -evalue 1e-10"))
orfs <- fread("orfs.tbl", header = F)
lx("Reading data")
if (!file.exists(paste0(file, ".predictions"))) {
types <-
read.table(file.path(script.basename, "model/xgbmodel_typesnames_dfam"),
sep = "\n")
types <- types$V1
features <-
read.table(file.path(script.basename, "model/xgbmodel_featurenames_dfam"),
sep = "\n")
features <- features$V1
xgb.fit <-
xgb.load(file.path(script.basename, "model/xgbmodel_20231030_dfam"))
lx("Processing")
orfs[, V1 := gsub("_[0-9]*$", "", V1)]
orfs[, prot := gsub(".*#", "", V2)]
orfs_table <-
dcast(
orfs,
V1 ~ prot,
value.var = "V12",
fun.agg = function(x) {
max(x)
}
)
orfs_table[is.na(orfs_table), ] <- 0
orfs_table[orfs_table == -Inf, ] <- 0
names <- orfs_table$V1
orfs_table$V1 <- NULL
colnames(orfs_table) <- make.names(colnames(orfs_table))
if (sum(!(colnames(orfs_table) %in% features)) > 0) {
orfs_table[, colnames(orfs_table)[!(colnames(orfs_table) %in% features)] :=
NULL]
}
orfs_table[, features[!(features %in% colnames(orfs_table))] := 0]
setcolorder(orfs_table, features)
lx("Get predictions")
xgb.pred2 = predict(xgb.fit, as.matrix(orfs_table), reshape = T)
xgb.pred2 = as.data.frame(xgb.pred2)
colnames(xgb.pred2) = types
xgb.pred2$prediction = apply(xgb.pred2, 1, function(x)
colnames(xgb.pred2)[which.max(x)])
xgb.pred2$prob = apply(xgb.pred2[1:ncol(xgb.pred2) - 1], 1, function(x)
max(x))
result <-
data.table(
name = paste0(">",names),
Prediction = xgb.pred2$prediction,
Probability = xgb.pred2$prob
)
fwrite(result, paste0(file, ".predictions"), sep = "\t")
}
fa <- ffasta(file)
setwd(current)
setwd(opt$output_folder)
# file <- paste0(opt$lib_name, "-consensi.fa")
lx("Reading orfs")
if (!file.exists("orfs.tbl")) {
system(
paste0(
"getorf -sequence ",
file,
" --outseq temp.orfs -minsize 450 &>/dev/null; blastp -num_threads 8 -query temp.orfs -db ",
script.basename,
"/libs/RepeatPeps.lib -outfmt 6 -evalue 1e-10 > orfs.tbl"
)
)
}
#orfs <- fread(cmd=paste0("getorf -sequence ", file," --outseq temp.orfs -minsize 450 &>/dev/null; blastp -num_threads 8 -query temp.orfs -db ", current,"/", script.basename, "/libs/RepeatPeps.lib -outfmt 6 -evalue 1e-10"))
orfs <- fread("orfs.tbl", header = F)
lx("Reading data")
if (!file.exists(paste0(file, ".predictions"))) {
types <-
read.table(file.path(script.basename, "model/xgbmodel_typesnames_dfam"),
sep = "\n")
types <- types$V1
features <-
read.table(file.path(script.basename, "model/xgbmodel_featurenames_dfam"),
sep = "\n")
features <- features$V1
xgb.fit <-
xgb.load(file.path(script.basename, "model/xgbmodel_20231030_dfam"))
lx("Processing")
orfs[, V1 := gsub("_[0-9]*$", "", V1)]
orfs[, prot := gsub(".*#", "", V2)]
orfs_table <-
dcast(
orfs,
V1 ~ prot,
value.var = "V12",
fun.agg = function(x) {
max(x)
}
)
orfs_table[is.na(orfs_table), ] <- 0
orfs_table[orfs_table == -Inf, ] <- 0
names <- orfs_table$V1
orfs_table$V1 <- NULL
colnames(orfs_table) <- make.names(colnames(orfs_table))
if (sum(!(colnames(orfs_table) %in% features)) > 0) {
orfs_table[, colnames(orfs_table)[!(colnames(orfs_table) %in% features)] :=
NULL]
}
orfs_table[, features[!(features %in% colnames(orfs_table))] := 0]
setcolorder(orfs_table, features)
lx("Get predictions")
xgb.pred2 = predict(xgb.fit, as.matrix(orfs_table), reshape = T)
xgb.pred2 = as.data.frame(xgb.pred2)
colnames(xgb.pred2) = types
xgb.pred2$prediction = apply(xgb.pred2, 1, function(x)
colnames(xgb.pred2)[which.max(x)])
xgb.pred2$prob = apply(xgb.pred2[1:ncol(xgb.pred2) - 1], 1, function(x)
max(x))
result <-
data.table(
name = paste0(">",names),
Prediction = xgb.pred2$prediction,
Probability = xgb.pred2$prob
)
fwrite(result, paste0(file, ".predictions"), sep = "\t") }
library(data.table)
library(ggplot2)
setwd("~/Dropbox/code/pantera/data/")
dmel <- fread("Dmel/pantera/pantera_lib_0.fa.benchmark", header =F)
dmel[,bin:= V2 %/%1000]
dmel[,type:="No TE or repeat feature"]
dmel[V4>0,type:="TIR"]
dmel[V3>0,type:="LTR"]
dmel[V5>0,type:="polyA"]
dmel[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
dmel[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
dmel[V6>100, type:="satellites"]
dmel[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
dmel_table <- dmel[bin<20, sum(V1),by=c("type","bin")]
ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
library(data.table)
library(ggplot2)
setwd("~/Dropbox/code/pantera/data/")
dmel <- fread("Dmel/pantera/pantera_lib_0.fa.benchmark", header =F)
dmel[,bin:= V2 %/%1000]
dmel[,type:="No TE or repeat feature"]
dmel[V4>0,type:="TIR"]
dmel[V3>0,type:="LTR"]
dmel[V5>0,type:="polyA"]
dmel[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
dmel[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
dmel[V6>100, type:="satellites"]
dmel[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
dmel_table <- dmel[bin<20, sum(V2),by=c("type","bin")]
ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
osav <- fread("Osav/pantera/pantera_lib_0.fa.benchmark", header =F)
osav[,bin:= V2 %/%1000]
osav[,type:="No TE or repeat feature"]
osav[V4>0,type:="TIR"]
osav[V3>0,type:="LTR"]
osav[V5>0,type:="polyA"]
osav[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
osav[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
osav[V6>100, type:="satellites"]
osav[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
osav_table <- osav[bin<20, sum(V2),by=c("type","bin")]
ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col() +
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
drer <- fread("Drer/pantera/pantera_lib_0.fa.benchmark", header =F)
drer[,bin:= V2 %/%1000]
drer[,type:="No TE or repeat feature"]
drer[V4>0,type:="TIR"]
drer[V3>0,type:="LTR"]
drer[V5>0,type:="polyA"]
drer[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
drer[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
drer[V6>100, type:="satellites"]
drer[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
drer_table <- drer[bin<20, sum(V2),by=c("type","bin")]
ggplot(drer_table, aes(x=bin, y=V1, fill = type))+
geom_col() +
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
svg("dmel_segments.svg", width = 2000, height = 800)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
svg("dmel_segments.svg", width = 1200, height = 400)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
ggsave("dmel_segments.svg", width = 1200, height = 400)
ggsave("dmel_segments.svg", width = 6, height = 2)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
ggsave("dmel_segments.svg", width = 9, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
ggsave("dmel_segments.svg", width = 10, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
ggsave("dmel_segments.svg", width = 12, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
library(data.table)
library(ggplot2)
setwd("~/Dropbox/code/pantera/data/")
dmel <- fread("Dmel/pantera/pantera_lib_0.fa.benchmark", header =F)
dmel[,bin:= V2 %/%1000]
dmel[,type:="No TE or repeat feature"]
dmel[V4>0,type:="TIR"]
dmel[V3>0,type:="LTR"]
dmel[V5>0,type:="polyA"]
dmel[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
dmel[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
dmel[V6>100, type:="satellites"]
dmel[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
dmel_table <- dmel[bin<20, sum(V2),by=c("type","bin")]
ggsave("dmel_segments.svg", width = 12, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
osav <- fread("Osav/pantera/pantera_lib_0.fa.benchmark", header =F)
osav[,bin:= V2 %/%1000]
osav[,type:="No TE or repeat feature"]
osav[V4>0,type:="TIR"]
osav[V3>0,type:="LTR"]
osav[V5>0,type:="polyA"]
osav[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
osav[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
osav[V6>100, type:="satellites"]
osav[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
osav_table <- osav[bin<20, sum(V2),by=c("type","bin")]
ggsave("osav_segments.svg", width = 12, height = 3)
p <- ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
drer <- fread("Drer/pantera/pantera_lib_0.fa.benchmark", header =F)
drer[,bin:= V2 %/%1000]
drer[,type:="No TE or repeat feature"]
drer[V4>0,type:="TIR"]
drer[V3>0,type:="LTR"]
drer[V5>0,type:="polyA"]
drer[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
drer[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
drer[V6>100, type:="satellites"]
drer[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
drer_table <- drer[bin<20, sum(V2),by=c("type","bin")]
ggsave("drer_segments.svg", width = 12, height = 3)
p <- ggplot(drer_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
library(data.table)
library(ggplot2)
setwd("~/Dropbox/code/pantera/data/")
dmel <- fread("Dmel/pantera/pantera_lib_0.fa.benchmark", header =F)
dmel[,bin:= V2 %/%1000]
dmel[,type:="No TE or repeat feature"]
dmel[V4>0,type:="TIR"]
dmel[V3>0,type:="LTR"]
dmel[V5>0,type:="polyA"]
dmel[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
dmel[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
dmel[V6>100, type:="satellites"]
dmel[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
dmel_table <- dmel[bin<20, sum(V2),by=c("type","bin")]
ggsave("dmel_segments.svg", width = 12, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
osav <- fread("Osav/pantera/pantera_lib_0.fa.benchmark", header =F)
osav[,bin:= V2 %/%1000]
osav[,type:="No TE or repeat feature"]
osav[V4>0,type:="TIR"]
osav[V3>0,type:="LTR"]
osav[V5>0,type:="polyA"]
osav[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
osav[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
osav[V6>100, type:="satellites"]
osav[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
osav_table <- osav[bin<20, sum(V2),by=c("type","bin")]
ggsave("osav_segments.svg", width = 12, height = 3)
p <- ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
drer <- fread("Drer/pantera/pantera_lib_0.fa.benchmark", header =F)
drer[,bin:= V2 %/%1000]
drer[,type:="No TE or repeat feature"]
drer[V4>0,type:="TIR"]
drer[V3>0,type:="LTR"]
drer[V5>0,type:="polyA"]
drer[V4>0 & V4>(V2 * 0.4),type:="palyndrome"]
drer[V3>0 & V3>(V2 * 0.4),type:="tandem repeat"]
drer[V6>100, type:="satellites"]
drer[,type:=factor(type, levels =c("TIR","palyndrome",  "polyA",  "LTR", "tandem repeat", "satellites","No TE or repeat feature"  ))]
drer_table <- drer[bin<20, sum(V2),by=c("type","bin")]
ggsave("drer_segments.svg", width = 12, height = 3)
p <- ggplot(drer_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
p <- ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
p <- ggplot(drer_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dmel_table <- dmel[bin<20, sum(V2),by=c("type","bin")]
ggsave("dmel_segments.svg", width = 12, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
p
ggsave("dmel_segments.svg", width = 12, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
ggsave("dmel_segments.svg", width = 12, height = 3)
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
p
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
p <- ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
ggsave("osav_segments.svg", width = 12, height = 3)
p <- ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
p <- ggplot(drer_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
ggsave("drer_segments.svg", width = 12, height = 3)
p <- ggplot(drer_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
dev.off()
p <- ggplot(dmel_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
p <- ggplot(osav_table, aes(x=bin, y=V1, fill = type))+
geom_col()+
scale_fill_manual(values = c("#cc0000","#ff6600","#003399","#669900","#99cc33","#bfbfbf","#404040")) +
theme_classic()
p
